Основные парадигмы объектно-ориентированного программирования (ООП) включают:
-Инкапсуляция: скрытие внутренних данных и реализации объекта, предоставление доступа только через публичные методы.
-Наследование: возможность создания нового класса на основе существующего, наследование свойств и методов базового класса.
-Полиморфизм: возможность объектов разных классов использовать одинаковые методы с различной реализацией.
-Абстракция: представление объектов реального мира в программе через их существенные характеристики и функции, скрывая детали реализации.
-Композиция: создание сложных объектов путем объединения более простых объектов.

Класс – тип элементов системы (результат системного анализа); класс/объект: состояние, поведение. является шаблоном или описанием, определяющим структуру, состояние и поведение объектов, которые на его основе создаются. Класс определяет переменные (поля) для хранения данных и методы для выполнения операций над этими данными. Он является основной единицей организации кода

Интерфейс: перечень сигнатур методов, предназначенных для реализации; контракт с фреймворком; спецификация фреймворка. 

Абстракция: моделирование системы, классы – типы объектов, объекты – экземпляры типов, классы/объекты отражают реальный объект только с точки зрения наблюдателя.

Инкапсуляция: способность объектов скрывать часть своего состояния и поведения.  
Инкапсуляция/проблема: как сделать так, чтобы пользователь класса/объекта имел доступ только к тем свойствам, полям и методам, которые необходимы пользователям  библиотеки классов

Наследование: повторное использование кода, позволяющее на основе одного класса, создать другой; принцип ЕСТЬ. Виртуальные функции, абстрактные функции, абстрактный класс.  
Наследование/проблема: много классов с одинаковыми свойствами и методами и между ними можно установить отношение ЕСТЬ.  

Полиморфизм: способность объекта изменять свое поведение в зависимости от контекста его использования. Простейшие: перезагружаемые методы, параметры по умолчанию, несколько конструкторов. Сложнее: вытеснение виртуальных функций в базовом классе и иерархии классов.          
Полиморфизм/проблема: как сделать так, чтобы базовый объект (при наследовании) изменял свое поведения в зависимости от производного объекта. 

Поле класса представляет собой переменную, которая хранит данные объекта класса. Она представляет состояние объекта и может быть доступна только внутри класса или также доступна извне, в зависимости от модификатора доступа. Поля обычно определяются внутри класса и могут быть простыми типами данных или ссылками на другие объекты.
Свойство класса представляет собой специальный метод, который обеспечивает доступ к значению или изменение значения определенного поля в объекте класса. Свойства обычно используются для обеспечения контроля доступа к данным объекта и позволяют выполнить дополнительные операции, например, проверку или вычисление значения перед его получением или установкой.

Принцип использования событий в ООП связан с возможностью объектов уведомлять другие объекты о возникновении определенных событий или ситуаций. Событие представляет собой действие или изменение состояния объекта, на которое другие объекты могут реагировать. Объект, который генерирует событие, является источником события, а объекты, которые обрабатывают событие, являются обработчиками события. События позволяют реализовать слабую связь между объектами и улучшить модульность и гибкость системы.

Индексаторы в ООП позволяют объектам класса предоставлять доступ к своим элементам или данным по индексу, подобно массивам. Индексаторы определяются внутри класса и позволяют обращаться к объекту с использованием синтаксиса, похожего на обращение к элементу массива, но с использованием произвольного индекса или ключа. Они предоставляют удобный способ доступа к элементам коллекций или другим структурам данных, скрывая детали реализации.

UML (Unified Modeling Language) - это графический язык моделирования, широко применяемый в разработке программного обеспечения для визуализации, спецификации, построения и документирования системы. UML предоставляет набор стандартных диаграмм и символов, которые позволяют разработчикам описывать структуру и поведение системы, включая классы, объекты, взаимодействия, состояния и многое другое.

Стереотип в UML представляет собой дополнительную метку или аннотацию, которая может быть применена к элементам модели для указания дополнительной информации или специфического значения. Стереотипы позволяют расширить базовый набор элементов и добавить специфическую семантику или поведение к элементам модели. Например, стереотипы могут использоваться для обозначения ролей, архитектурных шаблонов, типов данных и т. д.

   